### A Pluto.jl notebook ###
# v0.18.4

using Markdown
using InteractiveUtils

# ╔═╡ 5b4e526e-3dfa-11eb-3472-bd753d60c119
#hide
begin
#for sharing environments between notebooks
import Pkg
Pkg.activate(Base.current_project())
end

# ╔═╡ 5b3f2908-4bcf-4dea-b59b-e54a5f11f7b5
using PlutoTest

# ╔═╡ 1cfdfbea-3ef7-4a38-b42b-8610d0f90646
#hide
begin
using PlutoUI
TableOfContents()
end

# ╔═╡ 6eb14238-9192-4514-8aa6-064c84f66149
#export
begin
include("../src/Common.jl")
include("../src/Nb.jl")
include("../src/Readnb.jl")
end

# ╔═╡ 486bb5f0-54be-11eb-0e7c-1dcf55b5f983
md"The Export module helps in exporting the code to script files."

# ╔═╡ bfdf3f64-15ce-4679-a7b6-02dfbe624acf
#export
Code = Nb.Code

# ╔═╡ 296282f0-1770-11eb-0900-b37a94fbc69c
#export
begin
"""
Headers that would appear in a code file
"""
const header = "### A Nbdev script file ###"
const subheader = "### Autogenerated file. Don't modify. ###"
end

# ╔═╡ a0169477-e5ba-43bc-b86e-a377fa3b6e39
md"## savenb"

# ╔═╡ 76f97bd0-177b-11eb-2d78-77c72b2aef81
md"To export the required code, the following scenarios must be considered.

* Check if the file is in the src directory. If it's there then overwrite it. 
* If it's not there then create and then write."

# ╔═╡ 6069d790-176f-11eb-3020-41b450d430ad
#export
#TODO: refer to the cell in the code
#TODO: check if cell is export, hide orotherwise
"""
> savenb(io, nb::Notebook, modulename::String)--> Reads the supplied notebook and creates an io and writes stuffs like the module name and the content to the created io.
"""
function savenb(io, nb, modulename)
    println(io, header)
    println(io, subheader)
    println(io, "")
    println(io, "module $modulename")
	for cell in nb.cells
		if cell isa Code
			println(io, cell"\n")
		end
    end
	print(io, "end")	
end

# ╔═╡ d53cdb89-903d-42db-bdc9-e96765538a36
md"`savenb(io, nb::Notebook, modulename:: String)` filters out only those cells of a `Notebook` which contain code and then writes these into the stream. While writing the code to the destination directory it also creates a module."

# ╔═╡ c27ae516-7373-4142-865c-71bf7b5907ce
#export
"""
> savenb(path::String, dest::String)--> reads a notebook from the given path and writes the code cells to a new file in the given destination
"""
function savenb(path::String, dest::String)
	nb = Readnb.readnb(path)
	modulename=uppercasefirst(Common.strip(nb.name, r"[0-9_]"))
	open(joinpath(dest, "$modulename.jl"), "w") do io
        savenb(io, nb, modulename)
    end
end

# ╔═╡ d096aed0-54d7-11eb-31fc-b19801db8851
#Documenter.showdoc(savenb)

# ╔═╡ f7f0d72e-54d7-11eb-1b8a-b3689e09598b
md"## readfilenames"

# ╔═╡ cdada98e-0e13-11eb-30aa-1777efffb181
#export
begin
"""
> readfilenames(nbsdir::String)--> Reads files in the directory and subdirectories in the given path. Reads only the files with ".jl" extension
"""
function readfilenames(nbsdir::String)
	files=[]
	for file in readdir(nbsdir)
			if endswith(file, ".jl")
				push!(files,joinpath(nbsdir, file))
			end
	end
	files
end

end

# ╔═╡ 37ffeb40-54d8-11eb-0c8a-af262b2bec28
#Documenter.showdoc(readfilenames)

# ╔═╡ 4259e9b0-54d8-11eb-3768-85ede85ab315
md"#### Example"

# ╔═╡ 3a378ca5-ff38-44ac-ba50-db48679b1eaa
expected_list = ["../nbs/00_nbdev.jl"
"../nbs/01_export.jl"
"../nbs/01_nb.jl"
"../nbs/02_documenter.jl"
"../nbs/02_readnb.jl"
"../nbs/03_codeRunner.jl"
"../nbs/04_make.jl"
"../nbs/05_common.jl"
"../nbs/06_testfile.jl"
"../nbs/developerguide.jl"
"../nbs/index.jl"
"../nbs/styleguide.jl"
"../nbs/tutorial.jl"]

# ╔═╡ 329d1cea-da20-4fd9-900b-d169ab293901
readfilenames(joinpath("..", "nbs"))

# ╔═╡ 9b436180-177c-11eb-1c9a-ffbac62c95df
#noop
@test readfilenames(joinpath("..", "nbs")) == expected_list

# ╔═╡ 41d65310-0e11-11eb-1a36-87dc9ac941fa
#export
"""
> savenbs(fns::AbstractVector, srcdir::String, marker::String)--> maps the `export_file` function to each files
"""
function savenbs(fns::AbstractVector, dest::String)
	map(f->savenb(f, dest), fns)
end

# ╔═╡ 1b57d6f0-54d9-11eb-0a0a-db4b2959750b
#Documenter.showdoc(exportcontent)

# ╔═╡ 23e775a0-54d9-11eb-0106-431100572909
md"## getfileextension"

# ╔═╡ 01608690-0e14-11eb-3faa-9b960f57f3fe
#export
"""
> getfileextension(fn)--> get the file extensions in the pwd
"""
function getfileextension(fn)
    return fn[findlast(isequal('.'),fn):end]
end

# ╔═╡ 3b2578c0-54d9-11eb-00a0-595ad6034cfa
#Documenter.showdoc(getfileextension)

# ╔═╡ 44fa41a0-54d9-11eb-1cc1-bf7ce7d30abf
md"#### Example"

# ╔═╡ 06649ce0-177d-11eb-2092-d7160725252a
#noop
 @test getfileextension("test.jl") == ".jl"

# ╔═╡ 4de0d9f0-54d9-11eb-38c6-3de69a7ec1db
md"## notebook2script"

# ╔═╡ b34f9d82-0ede-11eb-0f08-afa0cc898e80
#export
"""
> notebook2script(nbsdir::String, srcdir::String)--> Export all the code from the provided notebook directory to the given source directory
"""
function notebook2script(src::String, dest::String)
	savenbs(readfilenames(src), dest)
end

# ╔═╡ 822b3787-f4ec-4edf-bd8d-7469c9ccc8bf
#export
export notebook2script

# ╔═╡ 730bc63e-54d9-11eb-1489-39a31e9b0deb
#Documenter.showdoc(notebook2script)

# ╔═╡ 7a9391e0-54d9-11eb-14f1-7f8e10036a1a
md"`notebook2script` can be called from a notebook which you intend to export. Usually in the last cell of that notebook"

# ╔═╡ baf3f1d0-0ede-11eb-2c02-1f53ed1a6cd7
notebook2script(joinpath("..", "nbs"), joinpath("..", "src"))

# ╔═╡ Cell order:
# ╠═486bb5f0-54be-11eb-0e7c-1dcf55b5f983
# ╠═5b4e526e-3dfa-11eb-3472-bd753d60c119
# ╠═6eb14238-9192-4514-8aa6-064c84f66149
# ╠═bfdf3f64-15ce-4679-a7b6-02dfbe624acf
# ╠═5b3f2908-4bcf-4dea-b59b-e54a5f11f7b5
# ╠═1cfdfbea-3ef7-4a38-b42b-8610d0f90646
# ╠═822b3787-f4ec-4edf-bd8d-7469c9ccc8bf
# ╠═296282f0-1770-11eb-0900-b37a94fbc69c
# ╠═a0169477-e5ba-43bc-b86e-a377fa3b6e39
# ╠═76f97bd0-177b-11eb-2d78-77c72b2aef81
# ╠═6069d790-176f-11eb-3020-41b450d430ad
# ╠═d53cdb89-903d-42db-bdc9-e96765538a36
# ╠═c27ae516-7373-4142-865c-71bf7b5907ce
# ╠═d096aed0-54d7-11eb-31fc-b19801db8851
# ╠═f7f0d72e-54d7-11eb-1b8a-b3689e09598b
# ╠═cdada98e-0e13-11eb-30aa-1777efffb181
# ╠═37ffeb40-54d8-11eb-0c8a-af262b2bec28
# ╠═4259e9b0-54d8-11eb-3768-85ede85ab315
# ╠═3a378ca5-ff38-44ac-ba50-db48679b1eaa
# ╠═329d1cea-da20-4fd9-900b-d169ab293901
# ╠═9b436180-177c-11eb-1c9a-ffbac62c95df
# ╠═41d65310-0e11-11eb-1a36-87dc9ac941fa
# ╠═1b57d6f0-54d9-11eb-0a0a-db4b2959750b
# ╠═23e775a0-54d9-11eb-0106-431100572909
# ╠═01608690-0e14-11eb-3faa-9b960f57f3fe
# ╠═3b2578c0-54d9-11eb-00a0-595ad6034cfa
# ╠═44fa41a0-54d9-11eb-1cc1-bf7ce7d30abf
# ╠═06649ce0-177d-11eb-2092-d7160725252a
# ╠═4de0d9f0-54d9-11eb-38c6-3de69a7ec1db
# ╠═b34f9d82-0ede-11eb-0f08-afa0cc898e80
# ╠═730bc63e-54d9-11eb-1489-39a31e9b0deb
# ╠═7a9391e0-54d9-11eb-14f1-7f8e10036a1a
# ╠═baf3f1d0-0ede-11eb-2c02-1f53ed1a6cd7
